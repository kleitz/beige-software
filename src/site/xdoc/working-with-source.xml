<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>Beigesoft</title>
   </properties>

  <body>

    <section name="Working with source code">
    
      <h4>Preparation</h4>
    
      <p>1. Get old OpenJdk7 from <a href="https://bintray.com/hgomez/obuildfactory-fedora19-x86-64/jdk-1.7.0-openjdk-x86_64/1.7.0.u72.b30-1.fc19#files">https://bintray.com/hgomez/obuildfactory-fedora19-x86-64/jdk-1.7.0-openjdk-x86_64/1.7.0.u72.b30-1.fc19#files</a>
        which made by project <a href="https://github.com/hgomez/obuildfactory">https://github.com/hgomez/obuildfactory</a>. Install it.</p>
      <p>2. <a target="#blank" href="http://maven.apache.org/download.html">Download Maven</a> e.g. Maven-3.3.9 then 
        unpack it into folder "$HOME/programmer/java/apache-maven-3.3.9" and add into PATH (see below)</p>
      <p>3. Download Android SDK tools without studio from <a href="http://developer.android.com/sdk/index.html#Other">http://developer.android.com/sdk/index.html#Other</a>. Unpack it (folder tools) into $HOME/programmer/android-sdk-linux. Add it into environment variables (see below).
      Launch <b>$ANDROID-SDK-HOME/tools/bin/sdkmanager "platforms;android-24"</b> and <b>$ANDROID-SDK-HOME/tools/bin/sdkmanager "build-tools;23.0.3"</b> (23.0.3 is the last Java 7 compatible), but it required JDK8 in JAVA_HOME!</p>
      If it blame "File ~.android/repositories.cfg could not be loaded" then criate it (empty file).<br></br>
      The best way is launch "$ANDROID-SDK-HOME/tools/android" and download all you need (platforms, tools, images).
      <p>4. In Fedora 64-bit add 32-bit compatibility: 
      dnf install glibc.i686 glibc-devel.i686 libstdc++.i686 zlib-devel.i686 ncurses-devel.i686 libX11-devel.i686 libXrender.i686 libXrandr.i686</p>
      <p>4. Add system variable JAVA_HOME, ANDROID_HOME and Maven bin directory and Android tools directory into PATH variable. For example in Linux add into .bashrc:
      <pre>
export JAVA_HOME=/opt/obuildfactory/jdk-1.7.0-openjdk-x86_64
export ANDROID_HOME=$HOME/programmer/android-sdk-linux
export PATH=$PATH:$HOME/programmer/java/apache-maven-3.3.9/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools
      </pre>
      Command <b>source ~/.bashrc</b> will reload settings.
      </p>
      <p>4. Install Postgesql 9+</p>
      <p>In Fedora open root terminal and run "dnf install postgresql-server postgresql-contrib"</p>
      <p>Turn it on on startup: "systemctl enable postgresql"</p>
      <p>Initialize database: "postgresql-setup --initdb --unit postgresql"</p>
      <p>Start it manually: "systemctl start postgresql"</p>
      <p>Then login as "postgres" (It doesn't need password for postgres user when you login from root") - run "su - postgres"</p>
      <p>As user "postgres" run "psql"</p>
      <p>In <b>psql</b> add user beigeaccounting: "CREATE USER beigeaccounting WITH PASSWORD 'beigeaccounting';"</p>
      <p>Then add database beigeaccounting: "CREATE DATABASE beigeaccounting OWNER beigeaccounting;"</p>
      <p>Then add database beigeaccountingtest: "CREATE DATABASE beigeaccountingtest OWNER beigeaccounting;"</p>
      <p>You can change postgres user password: "\password postgres"</p>
      <p>Type "\q" to exit from <b>psql</b></p>
      <p>Change authentication (change ident to password for IPV4): "nano /var/lib/pgsql/data/pg_hba.conf"</p>
      <p>To restart run: "systemctl restart postgresql"</p>
      <h4>Install MySql</h4>
      Login as root:
      <pre>
        $ dnf install community-mysql-server
        $ systemctl start mysqld // or service mysqld start
        $ systemctl enable mysqld
        $ mysql
          >ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass4!';
          >SHOW DATABASES;
          >CREATE DATABASE beigeaccounting;
          >CREATE DATABASE beigeaccountingtest;
          >CREATE USER 'beigeaccounting'@'localhost'IDENTIFIED BY 'beigeaccounting';
          >GRANT ALL ON beigeaccounting.* TO 'beigeaccounting'@'localhost';
          >GRANT ALL ON beigeaccountingtest.* TO 'beigeaccounting'@'localhost';
      </pre>
      <p>Get last source from <a href="https://github.com/demidenko05/beige-software">https://github.com/demidenko05/beige-software</a> (zip archive or git clone) into folder [HOME]/git/beige-software</p>
      <p>To install (compile) source open terminal, go to root source (beige-software folder where placed pom.xml), 
        then run "mvn clean install". Successfully installed applications will be at [home]/.m2/repository/org/beigesoft.
      </p>
      <p>To deploy any Android application into device go to its Maven folder and run "mvn android:deploy".
      </p>
      <p>To be able to debug android app in pom.xml android-maven-plugin must have in configuration run-debug=true,
        and in AndroidManifest.xml android:debuggable="true" inside application tag.
        To debug Android Applications run "mvn android:run" inside beige-software-android folder. 
        Android application will be waiting for debugger. Run in another terminal "adb jdwp" notice last JDWP address(23099 see screenshot below) and forward it to TCP by "adb forward tcp:1044 jdwp:23099".
        Now you can attach <b>jdb</b> to localhost:1044. 
      </p>
      <p>In case use pure command line generated Maven site has useful Xref reports (source code in HTML). 
        With it you can ease browse huge source code.</p>
      <p>
        To attache java debugger to localhost:1044 run "jdb -attach localhost:1044 -sourcepath ~/git/beige-software/beige-lib/src/main/java:~/git/beige-software/beige-android-lib/src/main/java:~/git/beige-software/beige-software-base/src/main/java:~/git/beige-software/beige-software-android/src/main/java"
      </p>
      <p>
        Add breakpoint in jdb: stop at org.beigesoft.uml.service.edit.SrvEditInstanceFull:24
      </p>
      
      <p align="center">Debug Android application with jdb:</p>
      <p align="center"><img style="max-width: 100%" src="include/javadebugger.png" /></p>
      
      <p>Invoke in console "[ANDROID-SDK-HOME]/tools/logcat" to see logs from Android device.</p>
      
      <p>
        To debug standard java application (e.g. beige-software-swing) launch from its folder 
        "mvn exec:exec -Dexec.executable="java" -Dexec.args="-classpath %classpath -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=1045 org.beigesoft.uml.app.swing.GuiMainUmlInteractive"".
      </p>
      
      <p>Then you can debug with same way: "jdb -attach localhost:1045 -sourcepath ~/git/beige-software/beige-lib/src/main/java:~/git/beige-software/beige-swing-lib/src/main/java:~/git/beige-software/beige-software-base/src/main/java:~/git/beige-software/beige-software-swing/src/main/java".</p>
      
      <p>
        Any way <b>jdb</b> has no user friendly interface. It has no history, you even can not change a letter inside just typed command.
      </p>
      
      <p>To replace "foo" with "bar" in all java files in current folder and subfolders in linux execute "find . -type f -name "*.java" -exec sed -i "s/foo/bar/g" {} +"</p>

      <p>To replace Tab with two spaces "  " execute "find . -type f -name "*.java" -exec sed -i "s/\t/  /g" {} +"</p>

      <p>To list all java files that contains string "SrvGetNodeSimple" run: "grep --include=*.java -rwl '.' -e "SrvGetNodeSimple""</p>
      
      <p><b>Geany</b> is the best text editor for Linux. It has several IDE features e.g. find usage(only in the opened files). 
        To generate getters and setters install <b>gawk</b> and create script <b>genGetSet.sh</b>:
        <pre>
#!/bin/bash
   
# It generates simple getters and setters for given .java file.
# You have to respect checkstyle, e.g. "No tabs"
echo "  //Simple getters and setters:"
cat $1 | grep private | awk 'BEGIN { FS = "  | |;" }
{
  varType = "1"
  varName = ""
  for (i = 1; i &lt;= NF; i++) if ($i != "" &amp;&amp; $i != "private") {
    if (varType == "1") varType = $i;
    else {
      if (index($i, ",") &gt; 0 || index($i, "&gt;") &gt; 0) varType = varType " " $i;
      else { varName = $i; break; }
    }
  }
  if (varName != "") {
    print "" ;
    print "  /**" ;
    print "   * &lt;p&gt;Getter for " varName ".&lt;/p&gt;" ;
    print "   * @return " varType;
    print "   **/" ;
    print "  public final " varType " get" toupper(substr(varName,1,1)) substr(varName, 2) "() {";
    print "    return this." varName ";";
    print "  }";
    print "" ;
    print "  /**" ;
    print "   * &lt;p&gt;Setter for " varName ".&lt;/p&gt;" ;
    print "   * @param p" toupper(substr(varName,1,1)) substr(varName, 2) " reference";
    print "   **/" ;
    print "  public final void set" toupper(substr(varName,1,1)) substr(varName, 2) "(final " varType " p" toupper(substr(varName,1,1)) substr(varName, 2) ") {";
    print "    this." varName " = p" toupper(substr(varName,1,1)) substr(varName, 2) ";";
    print "  }";
  }
}'
$SHELL
        </pre>
        Make it executable. In PCManFM file manager right click on java file and choose "open with". Switch tab "custom command line"
        then press "browse" and choose this script, check "execute in terminal" and "keep terminal window open" then type name "genGetSet"
        then press "OK" to run script on java file.
        Terminal window with text of generated getter ans setters will appeared. Select entries then copy and paste them into java file. 
      </p>

    </section>

  </body>

</document>
